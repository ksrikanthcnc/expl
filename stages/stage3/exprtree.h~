#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define YYSTYPE tnode *
#include "lex.yy.c"
#include "y.tab.c"
#define reg_index int
//#include <signal.h>
//#define brkp	raise(SIGINT);
//#define boo 	printf("\t\t\t\tERROR:\t(File:%s\tfunc:%s\tLine:%d)\n",__FILE__,__func__,__LINE__);
int indents=0;
var [26];
typedef struct tnode { 
	char type;
/*
i	int
c	char
b	comp oper <,>,<=,>=,!=,==
n	just a node
a	arth	+,-,*,/,=
f	func	read,write
s	stmt	if,ifelse,while
*/
	int num;
	char id;
//	char* op;
	char* func;
/*
f,a,o,s

type='f'
read
write
type='a'
+
-
*
/
type='b'
<
>
<=
>=
!=
==
type='s'
if
ifelse
while
*/
	struct tnode *left,*right,*down;
}tnode;

struct tnode* makeLeafNum(int n);
struct tnode* makeLeafID(char ID);
struct tnode* makeNode(char* str);
struct tnode* makeOperatorNode(char* c,struct tnode *l,struct tnode *r);
struct tnode* makeFunc(char *c,struct tnode *t);
struct tnode* twoTree(struct tnode *l, struct tnode *r,char* s);
struct tnode* threeTree(struct tnode *l, struct tnode *d, struct tnode *r,char* s);
int evaluate(struct tnode *t);

reg_index getReg();
void freeReg();
reg_index codeGen( struct tnode *t) ;
void Write(reg_index reg,reg_index ret);
void Read(int addr,reg_index ret);
void Exit();
void brkp();
int* glabel1=(int *)malloc(sizeof(int)*100);
int* glabel2=(int *)malloc(sizeof(int)*100);
int top=-1;

reg_index reg;
int label;
FILE *target_file;

